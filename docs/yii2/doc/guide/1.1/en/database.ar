<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    	<meta charset="UTF-8" />
		<meta name="keywords" content="yii framework, tutorial, guide, version 1.1" />
	<meta name="description" content="Although Yii DAO can handle virtually any database-related task, chances
are that we would spend 90% of our time in writing some SQL statements
which perform the common CRUD (create, read, update and " />
    <link rel="shortcut icon" type="image/x-icon" href="http://static.yiiframework.com/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="http://static.yiiframework.com/css/site-20130404102234.css" />

	<link title="Lives News for Yii Framework" rel="alternate" type="application/rss+xml" href="http://www.yiiframework.com/rss.xml/" />
	<title>Working with Databases: Active Record | The Definitive Guide to Yii | Yii PHP Framework</title>
	<link rel="search" type="application/opensearchdescription+xml" title="Yii API Search" href="/search-api.xml" />
	<link rel="search" type="application/opensearchdescription+xml" title="Yii Site Search" href="/search-site.xml" />
</head>

<body class="mac">
<div class="layout-main">

	<div class="layout-main-shortcuts">
		<div class="container_12">
            <a style="color:darkred;" href="https://github.com/yiisoft/yii2">Github</a> &middot;
            <a style="color:darkgreen;" href="https://twitter.com/yiiframework">Twitter</a> &middot;
            <a style="color:darkblue;" href="https://www.facebook.com/groups/yiitalk/">Facebook</a> &middot;
            <a href="/doc/guide/">Guide</a> &middot;
            <a href="/doc/api/">Class Reference</a> &middot;
            <a href="/doc-2.0/guide-index.html">Guide 2.0</a> &middot;
            <a href="/doc-2.0/index.html">API 2.0</a> &middot;
            <a href="/wiki/">Wiki</a> &middot;
            <a href="/extensions/">Extensions</a> &middot;
            <a href="/forum/">Forum</a> &middot;
			<a href="/chat/">Live Chat</a> &middot;
                            <a href="/login/">Login</a>            		</div>
	</div>

	<div class="layout-main-bg">
		<div class="layout-main-header">
			<div class="container_12">
				<div class="grid_4">
					<a class="logo" href="/"><img alt="Yii Logo" src="http://static.yiiframework.com/css/img/logo.png" title="Yii Framework" width="284" height="64" /></a>				</div>
				<div class="grid_8 omega">
					<div class="nav">
						<ul class="menu" id="yw0">
<li class="about"><a class="main" href="/about/">About</a>
<ul>
<li><a href="/about/">About Yii</a></li>
<li><a href="/features/">Features</a></li>
<li><a href="/performance/">Performance</a></li>
<li><a href="/license/">License</a></li>
<li class="last"><a href="/contact/">Contact Us</a></li>
</ul>
</li>
<li class="downloads"><a class="main" href="/download/">Downloads</a>
<ul>
<li><a href="/download/">Framework</a></li>
<li><a href="/extensions/">Extensions</a></li>
<li><a href="/demos/">Demos</a></li>
<li class="last"><a href="/logo/">Logo</a></li>
</ul>
</li>
<li class="documentation active"><a class="main" href="/doc/">Documentation</a>
<ul>
<li><a href="/tour/">Take the Tour</a></li>
<li class="active"><a href="/tutorials/">Tutorials</a></li>
<li><a href="/doc/api/">Class Reference</a></li>
<li><a href="/doc-2.0/guide-index.html">Guide 2.0</a></li>
<li><a href="/doc-2.0/index.html">Class Reference 2.0</a></li>
<li><a href="/wiki/">Wiki</a></li>
<li><a href="/screencasts/">Screencasts</a></li>
<li class="last"><a href="/resources/">Resources</a></li>
</ul>
</li>
<li class="development"><a class="main" href="https://github.com/yiisoft/yii/commits/master">Development</a>
<ul>
<li><a href="/contribute/">Contribute to Yii</a></li>
<li><a href="https://github.com/yiisoft/yii/commits/master">Latest Updates</a></li>
<li><a href="https://github.com/yiisoft/yii/issues/new">Report a Bug</a></li>
<li class="last"><a href="/security/">Report a Security Issue</a></li>
</ul>
</li>
<li class="community last"><a class="main" href="/community/">Community</a>
<ul>
<li><a href="/forum/">Forum</a></li>
<li><a href="/chat/">Live Chat</a></li>
<li><a href="/news/">News</a></li>
<li><a href="/user/halloffame/">Hall of Fame</a></li>
<li class="last"><a href="/badges/">Badges</a></li>
</ul>
</li>
</ul>						<div class="search">
							<form method="get" action="/search/">
								<div class="keyword">
	                                <input name="q" value="" />
									<a href="#" title="search" class="global-search">search</a>
								</div>
							</form>
						</div>
					</div>
				</div>
				<div class="clear"></div>
			</div>
		</div>

		<div class="container_12">
						<div class="grid_12">
												<div class="layout-main-submenu">
					<ul>
						<li class="main">Documentation</li>
												<li><a href="/tour/">Take the Tour</a></li>
												<li class="active"><a href="/tutorials/">Tutorials</a></li>
												<li><a href="/doc/api/">Class Reference</a></li>
												<li><a href="/doc-2.0/guide-index.html">Guide 2.0</a></li>
												<li><a href="/doc-2.0/index.html">Class Reference 2.0</a></li>
												<li><a href="/wiki/">Wiki</a></li>
												<li><a href="/screencasts/">Screencasts</a></li>
												<li><a href="/resources/">Resources</a></li>
											</ul>
				</div>
				
				
				
									<div class="layout-main-body">
						<div class="tutorial-view">
    <div class="grid_3 alpha">
        <div class="nav-toc">
    		<div class="title">The Definitive Guide to Yii</div>
    		<div class="langver">
	            <strong>Language &amp; version</strong>
	    		<div class="languages g-dropdown">
	    		<span>English<i></i></span>
<ul>
<li><a href="/doc/guide/1.1/de/database.ar">Deutsch</a></li>
<li><a href="/doc/guide/1.1/es/database.ar">Español</a></li>
<li><a href="/doc/guide/1.1/fr/database.ar">Français</a></li>
<li><a href="/doc/guide/1.1/he/database.ar">עִבְרִית</a></li>
<li><a href="/doc/guide/1.1/id/database.ar">Bahasa Indonesia</a></li>
<li><a href="/doc/guide/1.1/it/database.ar">Italiano</a></li>
<li><a href="/doc/guide/1.1/ja/database.ar">日本語</a></li>
<li><a href="/doc/guide/1.1/pl/database.ar">Polski</a></li>
<li><a href="/doc/guide/1.1/pt/database.ar">Português</a></li>
<li><a href="/doc/guide/1.1/pt_br/database.ar">Português brasileiro</a></li>
<li><a href="/doc/guide/1.1/ro/database.ar">România</a></li>
<li><a href="/doc/guide/1.1/ru/database.ar">Русский</a></li>
<li><a href="/doc/guide/1.1/sv/database.ar">Svenska</a></li>
<li><a href="/doc/guide/1.1/uk/database.ar">украї́нська</a></li>
<li><a href="/doc/guide/1.1/zh_cn/database.ar">简体中文</a></li>
</ul>
	    		</div>
				<div class="versions g-dropdown">
	    		<span>1.1<i></i></span>
<ul>
<li><a href="/doc/guide/1.0/en/database.ar">1.0</a></li>
</ul>
				</div>
				<div class="clear"></div>
			</div>
            <div class="widget-search-box">
    <form method="get" action="/search/">
        <strong>Search in this tutorial</strong>
		<input type="text" name="q" class="keyword g-text" />
        <input type="hidden" name="type" value="guide" />
        <input type="hidden" name="lang" value="en" />
        <input type="submit" value="Find" class="btn btn-info" />
	</form>
</div>
			<ul class="toc">
						    <li class="chapter"><strong>Getting Started</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/index">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/changes">New Features</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/upgrade">Upgrading from 1.0 to 1.1</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/quickstart.what-is-yii">What is Yii</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/quickstart.installation">Installation</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/quickstart.apache-nginx-config">Apache and Nginx configurations</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/quickstart.first-app">Creating First Yii Application</a>			            </li>
			        			    						    <li class="chapter"><strong>Fundamentals</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.mvc">Model-View-Controller (MVC)</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.entry">Entry Script</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.application">Application</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.controller">Controller</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.model">Model</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.view">View</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.component">Component</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.module">Module</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.namespace">Path Alias and Namespace</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.convention">Conventions</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.workflow">Development Workflow</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/basics.best-practices">Best MVC Practices</a>			            </li>
			        			    						    <li class="chapter"><strong>Working with Forms</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.overview">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.model">Creating Model</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.action">Creating Action</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.view">Creating Form</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.table">Collecting Tabular Input</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/form.builder">Using Form Builder</a>			            </li>
			        			    						    <li class="chapter"><strong>Working with Databases</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/database.overview">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/database.dao">Database Access Objects</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/database.query-builder">Query Builder</a>			            </li>
			        			    			        			            <li class="active">
			                &raquo; Active Record &laquo;
			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/database.arr">Relational Active Record</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/database.migration">Database Migration</a>			            </li>
			        			    						    <li class="chapter"><strong>Caching</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/caching.overview">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/caching.data">Data Caching</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/caching.fragment">Fragment Caching</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/caching.page">Page Caching</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/caching.dynamic">Dynamic Content</a>			            </li>
			        			    						    <li class="chapter"><strong>Extending Yii</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/extension.overview">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/extension.use">Using Extensions</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/extension.create">Creating Extensions</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/extension.integration">Using 3rd-Party Libraries</a>			            </li>
			        			    						    <li class="chapter"><strong>Testing</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/test.overview">Overview</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/test.fixture">Defining Fixtures</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/test.unit">Unit Testing</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/test.functional">Functional Testing</a>			            </li>
			        			    						    <li class="chapter"><strong>Special Topics</strong></li>
			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.gii">Automatic Code Generation</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.url">URL Management</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.auth">Authentication and Authorization</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.theming">Theming and Skin</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.logging">Logging</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.error">Error Handling</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.webservice">Web Service</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.i18n">Internationalization (I18N)</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.prado">Alternative Template Syntax</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.console">Console Applications</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.security">Security</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/topics.performance">Performance Tuning</a>			            </li>
			        			    			        			            <li>
			                <a href="/doc/guide/1.1/en/quickstart.first-app-yiic">Code Generation using Command Line Tools (deprecated)</a>			            </li>
			        			    						</ul>
        </div>
    </div>
    <div class="grid_9 omega">
    	<div class="g-markdown"><h1 id="active-record">Active Record</h1>
<div class="google-ad" style="float:right;margin:0 0 1em 1em;">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-3732587985864947";
google_ad_slot = "2830391674";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="toc"><ol><li><a href="#establishing-db-connection">Establishing DB Connection</a></li>
<li><a href="#defining-ar-class">Defining AR Class</a></li>
<li><a href="#creating-record">Creating Record</a></li>
<li><a href="#reading-record">Reading Record</a></li>
<li><a href="#updating-record">Updating Record</a></li>
<li><a href="#deleting-record">Deleting Record</a></li>
<li><a href="#data-validation">Data Validation</a></li>
<li><a href="#comparing-records">Comparing Records</a></li>
<li><a href="#customization">Customization</a></li>
<li><a href="#using-transaction-with-ar">Using Transaction with AR</a></li>
<li><a href="#named-scopes">Named Scopes</a></li></ol></div>


<p>Although Yii DAO can handle virtually any database-related task, chances
are that we would spend 90% of our time in writing some SQL statements
which perform the common CRUD (create, read, update and delete) operations.
It is also difficult to maintain our code when they are mixed with SQL
statements. To solve these problems, we can use Active Record.</p>

<p>Active Record (AR) is a popular Object-Relational Mapping (ORM) technique.
Each AR class represents a database table (or view) whose attributes are
represented as the AR class properties, and an AR instance represents a row
in that table. Common CRUD operations are implemented as AR methods. As a
result, we can access our data in a more object-oriented way. For example,
we can use the following code to insert a new row to the <code>tbl_post</code> table:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">sample post</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">content</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">post body content</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>In the following we describe how to set up AR and use it to perform CRUD
operations. We will show how to use AR to deal with database relationships
in the next section. For simplicity, we use the following database table
for our examples in this section. Note that if you are using MySQL database,
you should replace <code>AUTOINCREMENT</code> with <code>AUTO_INCREMENT</code> in the following SQL.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">CREATE</span> <span class="hl-reserved">TABLE</span> <span class="hl-identifier">tbl_post</span> <span class="hl-brackets">(</span>
    <span class="hl-identifier">id</span> <span class="hl-reserved">INTEGER</span> <span class="hl-reserved">NOT</span> <span class="hl-reserved">NULL</span> <span class="hl-reserved">PRIMARY</span> <span class="hl-reserved">KEY</span> <span class="hl-identifier">AUTOINCREMENT</span><span class="hl-code">,
    </span><span class="hl-identifier">title</span> <span class="hl-reserved">VARCHAR</span><span class="hl-brackets">(</span><span class="hl-number">128</span><span class="hl-brackets">)</span> <span class="hl-reserved">NOT</span> <span class="hl-reserved">NULL</span><span class="hl-code">,
    </span><span class="hl-identifier">content</span> <span class="hl-identifier">TEXT</span> <span class="hl-reserved">NOT</span> <span class="hl-reserved">NULL</span><span class="hl-code">,
    </span><span class="hl-identifier">create_time</span> <span class="hl-reserved">INTEGER</span> <span class="hl-reserved">NOT</span> <span class="hl-reserved">NULL</span>
<span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="note">
<p><strong>Note:</strong> AR is not meant to solve all database-related tasks. It is best
  used for modeling database tables in PHP constructs and performing queries
  that do not involve complex SQLs. Yii DAO should be used for those complex
  scenarios.</p>
</blockquote>

<h2 id="establishing-db-connection">1. Establishing DB Connection <a class="anchor" href="#establishing-db-connection">¶</a></h2>

<p>AR relies on a DB connection to perform DB-related operations. By default,
it assumes that the <code>db</code> application component gives the needed
<a href="/doc/api/1.1/CDbConnection">CDbConnection</a> instance which serves as the DB connection. The following
application configuration shows an example:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
    <span class="hl-quotes">'</span><span class="hl-string">components</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
        <span class="hl-quotes">'</span><span class="hl-string">db</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
            <span class="hl-quotes">'</span><span class="hl-string">class</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">system.db.CDbConnection</span><span class="hl-quotes">'</span><span class="hl-code">,
            </span><span class="hl-quotes">'</span><span class="hl-string">connectionString</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">sqlite:path/to/dbfile</span><span class="hl-quotes">'</span><span class="hl-code">,
            </span><span class="hl-comment">//</span><span class="hl-comment"> turn on schema caching to improve performance</span>
            <span class="hl-comment">//</span><span class="hl-comment"> 'schemaCachingDuration'=&gt;3600,</span>
        <span class="hl-brackets">)</span><span class="hl-code">,
    </span><span class="hl-brackets">)</span><span class="hl-code">,
</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="tip">
<p><strong>Tip:</strong> Because Active Record relies on the metadata about tables to
  determine the column information, it takes time to read the metadata and
  analyze it. If the schema of your database is less likely to be changed,
  you should turn on schema caching by configuring the
  <a href="/doc/api/1.1/CDbConnection#schemaCachingDuration">CDbConnection::schemaCachingDuration</a> property to be a value greater than
  0.</p>
</blockquote>

<p>Support for AR is limited by DBMS. Currently, only the following DBMS are
supported:</p>

<ul>
<li><a href="http://www.mysql.com">MySQL 4.1 or later</a></li>
<li><a href="https://mariadb.com">MariaDB</a></li>
<li><a href="http://www.postgres.com">PostgreSQL 7.3 or later</a></li>
<li><a href="http://www.sqlite.org">SQLite 2 and 3</a></li>
<li><a href="http://www.microsoft.com/sqlserver/">Microsoft SQL Server 2000 or later</a></li>
<li><a href="http://www.oracle.com">Oracle</a></li>
</ul>

<p>If you want to use an application component other than <code>db</code>, or if you
want to work with multiple databases using AR, you should override
<a href="/doc/api/1.1/CActiveRecord#getDbConnection">CActiveRecord::getDbConnection()</a>. The <a href="/doc/api/1.1/CActiveRecord">CActiveRecord</a> class is the base
class for all AR classes.</p>

<blockquote class="tip">
<p><strong>Tip:</strong> There are two ways to work with multiple databases in AR. If the
  schemas of the databases are different, you may create different base AR
  classes with different implementation of
  <a href="/doc/api/1.1/CActiveRecord#getDbConnection">getDbConnection()</a>. Otherwise, dynamically
  changing the static variable <a href="/doc/api/1.1/CActiveRecord#db">CActiveRecord::db</a> is a better idea.</p>
</blockquote>

<h2 id="defining-ar-class">2. Defining AR Class <a class="anchor" href="#defining-ar-class">¶</a></h2>

<p>To access a database table, we first need to define an AR class by
extending <a href="/doc/api/1.1/CActiveRecord">CActiveRecord</a>. Each AR class represents a single database
table, and an AR instance represents a row in that table. The following
example shows the minimal code needed for the AR class representing the
<code>tbl_post</code> table.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">Post</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">public</span> <span class="hl-reserved">static</span> <span class="hl-reserved">function</span> <span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-var">$className</span><span class="hl-code">=</span><span class="hl-reserved">__CLASS__</span><span class="hl-brackets">)</span>
    <span class="hl-brackets">{</span>
        <span class="hl-reserved">return</span> <span class="hl-identifier">parent</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-var">$className</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-brackets">}</span>
 
    <span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">tableName</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
    <span class="hl-brackets">{</span>
        <span class="hl-reserved">return</span> <span class="hl-quotes">'</span><span class="hl-string">tbl_post</span><span class="hl-quotes">'</span><span class="hl-code">;
    </span><span class="hl-brackets">}</span>
<span class="hl-brackets">}</span></pre></div></div>

<blockquote class="tip">
<p><strong>Tip:</strong> Because AR classes are often referenced in many places, we can
  import the whole directory containing the AR class, instead of including
  them one by one. For example, if all our AR class files are under
  <code>protected/models</code>, we can configure the application as follows:</p>
  
  <div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
  <span class="hl-quotes">'</span><span class="hl-string">import</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
      <span class="hl-quotes">'</span><span class="hl-string">application.models.*</span><span class="hl-quotes">'</span><span class="hl-code">,
  </span><span class="hl-brackets">)</span><span class="hl-code">,
</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>
</blockquote>

<p>By default, the name of the AR class is the same as the database table
name. Override the <a href="/doc/api/1.1/CActiveRecord#tableName">tableName()</a> method if they
are different. The <a href="/doc/api/1.1/CActiveRecord#model">model()</a> method is declared as
such for every AR class (to be explained shortly).</p>

<blockquote class="info">
<p><strong>Info:</strong> To use the <a href="/doc/guide/1.1/en/database.dao#using-table-prefix">table prefix feature</a>,
  the <a href="/doc/api/1.1/CActiveRecord#tableName">tableName()</a> method
  for an AR class may be overridden as follows,</p>
  
  <div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">tableName</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">return</span> <span class="hl-quotes">'</span><span class="hl-string">{{post}}</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-brackets">}</span></pre></div></div>
  
  <p>That is, instead of returning the fully qualified table name, we return
  the table name without the prefix and enclose it in double curly brackets.</p>
</blockquote>

<p>Column values of a table row can be accessed as properties of the
corresponding AR instance. For example, the following code sets the
<code>title</code> column (attribute):</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">a sample post</span><span class="hl-quotes">'</span><span class="hl-code">;</span></pre></div></div>

<p>Although we never explicitly declare the <code>title</code> property in the <code>Post</code>
class, we can still access it in the above code. This is because <code>title</code> is
a column in the <code>tbl_post</code> table, and CActiveRecord makes it accessible as a
property with the help of the PHP <code>__get()</code> magic method. An exception will
be thrown if we attempt to access a non-existing column in the same way.</p>

<blockquote class="info">
<p><strong>Info:</strong> In this guide, we use lower case for all table names and column names.
  This is because different DBMS handle case-sensitivity differently.
  For example, PostgreSQL treats column names as case-insensitive
  by default, and we must quote a column in a query condition if the column
  contains mixed-case letters. Using lower case would help eliminate this problem.</p>
</blockquote>

<p>AR relies on well defined primary keys of tables. If a table does not have a primary key, it is required that the corresponding AR class specify which column(s) should be the primary key by overriding the <code>primaryKey()</code> method as follows,</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">primaryKey</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">return</span> <span class="hl-quotes">'</span><span class="hl-string">id</span><span class="hl-quotes">'</span><span class="hl-code">;
    </span><span class="hl-comment">//</span><span class="hl-comment"> For composite primary key, return an array like the following</span>
    <span class="hl-comment">//</span><span class="hl-comment"> return array('pk1', 'pk2');</span>
<span class="hl-brackets">}</span></pre></div></div>

<h2 id="creating-record">3. Creating Record <a class="anchor" href="#creating-record">¶</a></h2>

<p>To insert a new row into a database table, we create a new instance of the
corresponding AR class, set its properties associated with the table
columns, and call the <a href="/doc/api/1.1/CActiveRecord#save">save()</a> method to finish the
insertion.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">sample post</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">content</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">content for the sample post</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">create_time</span><span class="hl-code">=</span><span class="hl-identifier">time</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>If the table's primary key is auto-incremental, after the insertion the AR
instance will contain an updated primary key. In the above example, the
<code>id</code> property will reflect the primary key value of the newly inserted
post, even though we never change it explicitly.</p>

<p>If a column is defined with some static default value (e.g. a string, a
number) in the table schema, the corresponding property in the AR instance
will automatically has such a value after the instance is created. One way
to change this default value is by explicitly declaring the property in the
AR class:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">Post</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">public</span> <span class="hl-var">$title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">please enter a title</span><span class="hl-quotes">'</span><span class="hl-code">;
    ......
</span><span class="hl-brackets">}</span>
 
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-code">;
</span><span class="hl-reserved">echo</span> <span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">;  </span><span class="hl-comment">//</span><span class="hl-comment"> this would display: please enter a title</span></pre></div></div>

<p>An attribute can be assigned a value of <a href="/doc/api/1.1/CDbExpression">CDbExpression</a>
type before the record is saved (either insertion or updating) to the database.
For example, in order to save a timestamp returned by the MySQL <code>NOW()</code> function,
we can use the following code:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">create_time</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">CDbExpression</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">NOW()</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> $post-&gt;create_time='NOW()'; will not work because</span>
<span class="hl-comment">//</span><span class="hl-comment"> 'NOW()' will be treated as a string</span>
<span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="tip">
<p><strong>Tip:</strong> While AR allows us to perform database operations without writing
  cumbersom SQL statements, we often want to know what SQL statements are executed
  by AR underneath. This can be achieved by turning on the <a href="/doc/guide/1.1/en/topics.logging">logging feature</a>
  of Yii. For example, we can turn on <a href="/doc/api/1.1/CWebLogRoute">CWebLogRoute</a> in the application configuration,
  and we will see the executed SQL statements being displayed at the end of each Web page.
  We can set <a href="/doc/api/1.1/CDbConnection#enableParamLogging">CDbConnection::enableParamLogging</a> to be true in
  the application configuration so that the parameter values bound to the SQL
  statements are also logged.</p>
</blockquote>

<h2 id="reading-record">4. Reading Record <a class="anchor" href="#reading-record">¶</a></h2>

<p>To read data in a database table, we call one of the <code>find</code> methods as
follows.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> find the first row satisfying the specified condition</span>
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">find</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find the row with the specified primary key</span>
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findByPk</span><span class="hl-brackets">(</span><span class="hl-var">$postID</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find the row with the specified attribute values</span>
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findByAttributes</span><span class="hl-brackets">(</span><span class="hl-var">$attributes</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find the first row using the specified SQL statement</span>
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findBySql</span><span class="hl-brackets">(</span><span class="hl-var">$sql</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>In the above, we call the <code>find</code> method with <code>Post::model()</code>. Remember
that the static method <code>model()</code> is required for every AR class. The method
returns an AR instance that is used to access class-level methods
(something similar to static class methods) in an object context.</p>

<p>If the <code>find</code> method finds a row satisfying the query conditions, it will
return a <code>Post</code> instance whose properties contain the corresponding column
values of the table row. We can then read the loaded values like we do with
normal object properties, for example, <code>echo $post-&gt;title;</code>.</p>

<p>The <code>find</code> method will return null if nothing can be found in the database
with the given query condition.</p>

<p>When calling <code>find</code>, we use <code>$condition</code> and <code>$params</code> to specify query
conditions. Here <code>$condition</code> can be string representing the <code>WHERE</code> clause
in a SQL statement, and <code>$params</code> is an array of parameters whose values
should be bound to the placeholders in <code>$condition</code>. For example,</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> find the row with postID=10</span>
<span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">find</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">postID=:postID</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">:postID</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="note">
<p><strong>Note:</strong> In the above, we may need to escape the reference to the <code>postID</code> column
  for certain DBMS. For example, if we are using PostgreSQL, we would have to write
  the condition as <code>"postID"=:postID</code>, because PostgreSQL by default will treat column
  names as case-insensitive.</p>
</blockquote>

<p>We can also use <code>$condition</code> to specify more complex query conditions.
Instead of a string, we let <code>$condition</code> be a <a href="/doc/api/1.1/CDbCriteria">CDbCriteria</a> instance, which
allows us to specify conditions other than the <code>WHERE</code> clause. For example,</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$criteria</span><span class="hl-code">=</span><span class="hl-reserved">new</span> <span class="hl-identifier">CDbCriteria</span><span class="hl-code">;
</span><span class="hl-var">$criteria</span><span class="hl-code">-&gt;</span><span class="hl-identifier">select</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">title</span><span class="hl-quotes">'</span><span class="hl-code">;  </span><span class="hl-comment">//</span><span class="hl-comment"> only select the 'title' column</span>
<span class="hl-var">$criteria</span><span class="hl-code">-&gt;</span><span class="hl-identifier">condition</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">postID=:postID</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$criteria</span><span class="hl-code">-&gt;</span><span class="hl-identifier">params</span><span class="hl-code">=</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">:postID</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">find</span><span class="hl-brackets">(</span><span class="hl-var">$criteria</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-comment">//</span><span class="hl-comment"> $params is not needed</span></pre></div></div>

<p>Note, when using <a href="/doc/api/1.1/CDbCriteria">CDbCriteria</a> as query condition, the <code>$params</code> parameter
is no longer needed since it can be specified in <a href="/doc/api/1.1/CDbCriteria">CDbCriteria</a>, as shown
above.</p>

<p>An alternative way to <a href="/doc/api/1.1/CDbCriteria">CDbCriteria</a> is passing an array to the <code>find</code> method.
The array keys and values correspond to the criteria's property name and value,
respectively. The above example can be rewritten as follows,</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">find</span><span class="hl-brackets">(</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
    <span class="hl-quotes">'</span><span class="hl-string">select</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">title</span><span class="hl-quotes">'</span><span class="hl-code">,
    </span><span class="hl-quotes">'</span><span class="hl-string">condition</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">postID=:postID</span><span class="hl-quotes">'</span><span class="hl-code">,
    </span><span class="hl-quotes">'</span><span class="hl-string">params</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">:postID</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">,
</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="info">
<p><strong>Info:</strong> When a query condition is about matching some columns with the
  specified values, we can use
  <a href="/doc/api/1.1/CActiveRecord#findByAttributes">findByAttributes()</a>. We let the
  <code>$attributes</code> parameters be an array of the values indexed by the column
  names. In some frameworks, this task can be achieved by calling methods
  like <code>findByNameAndTitle</code>. Although this approach looks attractive, it
  often causes confusion, conflict and issues like case-sensitivity of column
  names.</p>
</blockquote>

<p>When multiple rows of data matching the specified query condition, we can
bring them in all together using the following <code>findAll</code> methods, each of
which has its counterpart <code>find</code> method, as we already described.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> find all rows satisfying the specified condition</span>
<span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAll</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find all rows with the specified primary keys</span>
<span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAllByPk</span><span class="hl-brackets">(</span><span class="hl-var">$postIDs</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find all rows with the specified attribute values</span>
<span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAllByAttributes</span><span class="hl-brackets">(</span><span class="hl-var">$attributes</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> find all rows using the specified SQL statement</span>
<span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAllBySql</span><span class="hl-brackets">(</span><span class="hl-var">$sql</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>If nothing matches the query condition, <code>findAll</code> would return an empty
array. This is different from <code>find</code> who would return null if nothing is
found.</p>

<p>Besides the <code>find</code> and <code>findAll</code> methods described above, the following
methods are also provided for convenience:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> get the number of rows satisfying the specified condition</span>
<span class="hl-var">$n</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">count</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> get the number of rows using the specified SQL statement</span>
<span class="hl-var">$n</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">countBySql</span><span class="hl-brackets">(</span><span class="hl-var">$sql</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> check if there is at least a row satisfying the specified condition</span>
<span class="hl-var">$exists</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">exists</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<h2 id="updating-record">5. Updating Record <a class="anchor" href="#updating-record">¶</a></h2>

<p>After an AR instance is populated with column values, we can change them
and save them back to the database table.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findByPk</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">new post title</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-comment">//</span><span class="hl-comment"> save the change to database</span></pre></div></div>

<p>As we can see, we use the same <a href="/doc/api/1.1/CActiveRecord#save">save()</a> method to
perform insertion and updating operations. If an AR instance is created
using the <code>new</code> operator, calling <a href="/doc/api/1.1/CActiveRecord#save">save()</a> would insert
a new row into the database table; if the AR instance is the result of some
<code>find</code> or <code>findAll</code> method call, calling <a href="/doc/api/1.1/CActiveRecord#save">save()</a> would
update the existing row in the table. In fact, we can use
<a href="/doc/api/1.1/CActiveRecord#isNewRecord">CActiveRecord::isNewRecord</a> to tell if an AR instance is new or not.</p>

<p>It is also possible to update one or several rows in a database table
without loading them first. AR provides the following convenient
class-level methods for this purpose:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> update the rows matching the specified condition</span>
<span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">updateAll</span><span class="hl-brackets">(</span><span class="hl-var">$attributes</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> update the rows matching the specified condition and primary key(s)</span>
<span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">updateByPk</span><span class="hl-brackets">(</span><span class="hl-var">$pk</span><span class="hl-code">,</span><span class="hl-var">$attributes</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> update counter columns in the rows satisfying the specified conditions</span>
<span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">updateCounters</span><span class="hl-brackets">(</span><span class="hl-var">$counters</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>In the above, <code>$attributes</code> is an array of column values indexed by column
names; <code>$counters</code> is an array of incremental values indexed by column
names; and <code>$condition</code> and <code>$params</code> are as described in the previous
subsection.</p>

<h2 id="deleting-record">6. Deleting Record <a class="anchor" href="#deleting-record">¶</a></h2>

<p>We can also delete a row of data if an AR instance has been populated with
this row.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findByPk</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-comment">//</span><span class="hl-comment"> assuming there is a post whose ID is 10</span>
<span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">delete</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-comment">//</span><span class="hl-comment"> delete the row from the database table</span></pre></div></div>

<p>Note, after deletion, the AR instance remains unchanged, but the
corresponding row in the database table is already gone.</p>

<p>The following class-level methods are provided to delete rows without the
need of loading them first:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> delete the rows matching the specified condition</span>
<span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">deleteAll</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-comment">//</span><span class="hl-comment"> delete the rows matching the specified condition and primary key(s)</span>
<span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">deleteByPk</span><span class="hl-brackets">(</span><span class="hl-var">$pk</span><span class="hl-code">,</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<h2 id="data-validation">7. Data Validation <a class="anchor" href="#data-validation">¶</a></h2>

<p>When inserting or updating a row, we often need to check if the column
values comply to certain rules. This is especially important if the column
values are provided by end users. In general, we should never trust
anything coming from the client side.</p>

<p>AR performs data validation automatically when
<a href="/doc/api/1.1/CActiveRecord#save">save()</a> is being invoked. The validation is based on
the rules specified in the <a href="/doc/api/1.1/CModel#rules">rules()</a> method of the AR class.
For more details about how to specify validation rules, refer to
the <a href="/doc/guide/1.1/en/form.model#declaring-validation-rules">Declaring Validation Rules</a>
section. Below is the typical workflow needed by saving a record:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">if</span><span class="hl-brackets">(</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-comment">//</span><span class="hl-comment"> data is valid and is successfully inserted/updated</span>
<span class="hl-brackets">}</span>
<span class="hl-reserved">else</span>
<span class="hl-brackets">{</span>
    <span class="hl-comment">//</span><span class="hl-comment"> data is invalid. call getErrors() to retrieve error messages</span>
<span class="hl-brackets">}</span></pre></div></div>

<p>When the data for inserting or updating is submitted by end users in an
HTML form, we need to assign them to the corresponding AR properties. We
can do so like the following:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-var">$_POST</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">title</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">content</span><span class="hl-code">=</span><span class="hl-var">$_POST</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">content</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>If there are many columns, we would see a long list of such assignments.
This can be alleviated by making use of the
<a href="/doc/api/1.1/CActiveRecord#attributes">attributes</a> property as shown below. More
details can be found in the <a href="/doc/guide/1.1/en/form.model#securing-attribute-assignments">Securing Attribute Assignments</a>
section and the <a href="/doc/guide/1.1/en/form.action">Creating Action</a> section.</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> assume $_POST['Post'] is an array of column values indexed by column names</span>
<span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">attributes</span><span class="hl-code">=</span><span class="hl-var">$_POST</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">Post</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">;
</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<h2 id="comparing-records">8. Comparing Records <a class="anchor" href="#comparing-records">¶</a></h2>

<p>Like table rows, AR instances are uniquely identified by their primary key
values. Therefore, to compare two AR instances, we merely need to compare
their primary key values, assuming they belong to the same AR class. A
simpler way is to call <a href="/doc/api/1.1/CActiveRecord#equals">CActiveRecord::equals()</a>, however.</p>

<blockquote class="info">
<p><strong>Info:</strong> Unlike AR implementation in other frameworks, Yii supports
  composite primary keys in its AR. A composite primary key consists of two
  or more columns. Correspondingly, the primary key value is represented as
  an array in Yii. The <a href="/doc/api/1.1/CActiveRecord#primaryKey">primaryKey</a> property gives
  the primary key value of an AR instance.</p>
</blockquote>

<h2 id="customization">9. Customization <a class="anchor" href="#customization">¶</a></h2>

<p><a href="/doc/api/1.1/CActiveRecord">CActiveRecord</a> provides a few placeholder methods that can be overridden
in child classes to customize its workflow.</p>

<ul>
<li><p><a href="/doc/api/1.1/CModel#beforeValidate">beforeValidate</a> and
<a href="/doc/api/1.1/CModel#afterValidate">afterValidate</a>: these are invoked before and
after validation is performed.</p></li>
<li><p><a href="/doc/api/1.1/CActiveRecord#beforeSave">beforeSave</a> and
<a href="/doc/api/1.1/CActiveRecord#afterSave">afterSave</a>: these are invoked before and after
saving an AR instance.</p></li>
<li><p><a href="/doc/api/1.1/CActiveRecord#beforeDelete">beforeDelete</a> and
<a href="/doc/api/1.1/CActiveRecord#afterDelete">afterDelete</a>: these are invoked before and
after an AR instance is deleted.</p></li>
<li><p><a href="/doc/api/1.1/CActiveRecord#afterConstruct">afterConstruct</a>: this is invoked for
every AR instance created using the <code>new</code> operator.</p></li>
<li><p><a href="/doc/api/1.1/CActiveRecord#beforeFind">beforeFind</a>: this is invoked before an AR finder
is used to perform a query (e.g. <code>find()</code>, <code>findAll()</code>).</p></li>
<li><p><a href="/doc/api/1.1/CActiveRecord#afterFind">afterFind</a>: this is invoked after every AR
instance created as a result of query.</p></li>
</ul>

<h2 id="using-transaction-with-ar">10. Using Transaction with AR <a class="anchor" href="#using-transaction-with-ar">¶</a></h2>

<p>Every AR instance contains a property named
<a href="/doc/api/1.1/CActiveRecord#dbConnection">dbConnection</a> which is a <a href="/doc/api/1.1/CDbConnection">CDbConnection</a>
instance. We thus can use the
<a href="/doc/guide/1.1/en/database.dao#using-transactions">transaction</a> feature provided by Yii
DAO if it is desired when working with AR:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$model</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-var">$transaction</span><span class="hl-code">=</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">dbConnection</span><span class="hl-code">-&gt;</span><span class="hl-identifier">beginTransaction</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-reserved">try</span>
<span class="hl-brackets">{</span>
    <span class="hl-comment">//</span><span class="hl-comment"> find and save are two steps which may be intervened by another request</span>
    <span class="hl-comment">//</span><span class="hl-comment"> we therefore use a transaction to ensure consistency and integrity</span>
    <span class="hl-var">$post</span><span class="hl-code">=</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findByPk</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">new post title</span><span class="hl-quotes">'</span><span class="hl-code">;
    </span><span class="hl-reserved">if</span><span class="hl-brackets">(</span><span class="hl-var">$post</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span>
        <span class="hl-var">$transaction</span><span class="hl-code">-&gt;</span><span class="hl-identifier">commit</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-reserved">else</span>
        <span class="hl-var">$transaction</span><span class="hl-code">-&gt;</span><span class="hl-identifier">rollback</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-brackets">}</span>
<span class="hl-reserved">catch</span><span class="hl-brackets">(</span><span class="hl-identifier">Exception</span> <span class="hl-var">$e</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-var">$transaction</span><span class="hl-code">-&gt;</span><span class="hl-identifier">rollback</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-reserved">throw</span> <span class="hl-var">$e</span><span class="hl-code">;
</span><span class="hl-brackets">}</span></pre></div></div>

<h2 id="named-scopes">11. Named Scopes <a class="anchor" href="#named-scopes">¶</a></h2>

<blockquote class="info">
<p><strong>Info:</strong> The original idea of named scopes came from Ruby on Rails.</p>
</blockquote>

<p>A <em>named scope</em> represents a <em>named</em> query criteria that can be combined with other named scopes and applied to an active record query.</p>

<p>Named scopes are mainly declared in the <a href="/doc/api/1.1/CActiveRecord#scopes">CActiveRecord::scopes()</a> method as name-criteria pairs. The following code declares two named scopes, <code>published</code> and <code>recently</code>, in the <code>Post</code> model class:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">Post</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span>
<span class="hl-brackets">{</span><span class="hl-code">
    ......
    </span><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">scopes</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
    <span class="hl-brackets">{</span>
        <span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
            <span class="hl-quotes">'</span><span class="hl-string">published</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
                <span class="hl-quotes">'</span><span class="hl-string">condition</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">status=1</span><span class="hl-quotes">'</span><span class="hl-code">,
            </span><span class="hl-brackets">)</span><span class="hl-code">,
            </span><span class="hl-quotes">'</span><span class="hl-string">recently</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
                <span class="hl-quotes">'</span><span class="hl-string">order</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">create_time DESC</span><span class="hl-quotes">'</span><span class="hl-code">,
                </span><span class="hl-quotes">'</span><span class="hl-string">limit</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">5</span><span class="hl-code">,
            </span><span class="hl-brackets">)</span><span class="hl-code">,
        </span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-brackets">}</span>
<span class="hl-brackets">}</span></pre></div></div>

<p>Each named scope is declared as an array which can be used to initialize a <a href="/doc/api/1.1/CDbCriteria">CDbCriteria</a> instance. For example, the <code>recently</code> named scope specifies that the <code>order</code> property to be <code>create_time DESC</code> and the <code>limit</code> property to be 5, which translates to a query criteria that should bring back the most recent 5 posts.</p>

<p>Named scopes are mostly used as modifiers to the <code>find</code> method calls. Several named scopes may be chained together and result in a more restrictive query result set. For example, to find the recently published posts, we can use the following code:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">published</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">recently</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAll</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>In general, named scopes must appear to the left of a <code>find</code> method call. Each of them provides a query criteria, which is combined with other criterias, including the one passed to the <code>find</code> method call. The net effect is like adding a list of filters to a query.</p>

<blockquote class="note">
<p><strong>Note:</strong> Named scopes can only be used with class-level methods. That is, the method must be called using <code>ClassName::model()</code>.</p>
</blockquote>

<h3 id="parameterized-named-scopes">Parameterized Named Scopes</h3>

<p>Named scopes can be parameterized. For example, we may want to customize the number of posts specified by the <code>recently</code> named scope. To do so, instead of declaring the named scope in the <a href="/doc/api/1.1/CActiveRecord#scopes">CActiveRecord::scopes</a> method, we need to define a new method whose name is the same as the scope name:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">recently</span><span class="hl-brackets">(</span><span class="hl-var">$limit</span><span class="hl-code">=</span><span class="hl-number">5</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">getDbCriteria</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">mergeWith</span><span class="hl-brackets">(</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span>
        <span class="hl-quotes">'</span><span class="hl-string">order</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">create_time DESC</span><span class="hl-quotes">'</span><span class="hl-code">,
        </span><span class="hl-quotes">'</span><span class="hl-string">limit</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$limit</span><span class="hl-code">,
    </span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-reserved">return</span> <span class="hl-var">$this</span><span class="hl-code">;
</span><span class="hl-brackets">}</span></pre></div></div>

<p>Then, we can use the following statement to retrieve the 3 recently published posts:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$posts</span><span class="hl-code">=</span><span class="hl-identifier">Post</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">published</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">recently</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAll</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>If we do not supply the parameter 3 in the above, we would retrieve the 5 recently published posts by default.</p>

<h3 id="default-scope">Default Scope</h3>

<p>A model class can have a default scope that would be applied for all queries (including relational ones) about the model. For example, a website supporting multiple languages may only want to display contents that are in the language the current user specifies. Because there may be many queries about the site contents, we can define a default scope to solve this problem. To do so, we override the <a href="/doc/api/1.1/CActiveRecord#defaultScope">CActiveRecord::defaultScope</a> method as follows,</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">Content</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">defaultScope</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
    <span class="hl-brackets">{</span>
        <span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
            <span class="hl-quotes">'</span><span class="hl-string">condition</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">&quot;</span><span class="hl-string">language='</span><span class="hl-quotes">&quot;</span><span class="hl-code">.</span><span class="hl-identifier">Yii</span><span class="hl-code">::</span><span class="hl-identifier">app</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">language</span><span class="hl-code">.</span><span class="hl-quotes">&quot;</span><span class="hl-string">'</span><span class="hl-quotes">&quot;</span><span class="hl-code">,
        </span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-brackets">}</span>
<span class="hl-brackets">}</span></pre></div></div>

<p>Now, if the following method call will automatically use the query criteria as defined above:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$contents</span><span class="hl-code">=</span><span class="hl-identifier">Content</span><span class="hl-code">::</span><span class="hl-identifier">model</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">-&gt;</span><span class="hl-identifier">findAll</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<blockquote class="note">
<p><strong>Note:</strong> Default scope and named scopes only apply to <code>SELECT</code> queries. They are ignored for <code>INSERT</code>, <code>UPDATE</code> and <code>DELETE</code> queries.
  Also, when declaring a scope (default or named), the AR class cannot be used to make DB queries in the method that declares the scope.</p>
</blockquote>

<div class="revision"><div class="google-ad" style="margin:-60px 0 5px 200px;">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-3732587985864947";
google_ad_slot = "7116172008";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>$Id$</div>
</div>
                <div class="prev-next-nav">
                            <div class="prev-topic"><a href="/doc/guide/1.1/en/database.query-builder">Query Builder</a></div>
                                        <div class="next-topic"><a href="/doc/guide/1.1/en/database.arr">Relational Active Record</a></div>
                    </div>
        
		        <div class="widget-comment-list" id="comments">
	<div class="comments">
		<h3>Total 9 comments</h3>
				<div class="comment alt-0">
			<a class="cid" id="c17416" title="permalink to this comment" href="#c17416">#17416</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=17416"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=17416&amp;vote=1"><span>1</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=17416&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/219826/">Masoud Sawari</a> at 2014/06/09 02:10am</div>
			<div class="title">Validate data dynamically</div>
			<div class="content"><p>You can add new properties to the model to validate data dynamically depending on various conditions. (sorry for my bad English)</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">//</span><span class="hl-comment"> in the model's class (Post for example)</span>
<span class="hl-reserved">class</span> <span class="hl-identifier">Post</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span>
<span class="hl-brackets">{</span>
   <span class="hl-reserved">public</span> <span class="hl-var">$max</span><span class="hl-code"> = </span><span class="hl-number">255</span><span class="hl-code">;
 
   </span><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">rules</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
   <span class="hl-brackets">{</span>
      <span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
         <span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">title</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">length</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">max</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">max</span><span class="hl-brackets">)</span><span class="hl-code">,
         </span><span class="hl-comment">//</span><span class="hl-comment"> other validation rules         </span>
      <span class="hl-brackets">)</span><span class="hl-code">;
   </span><span class="hl-brackets">}</span>
 
   <span class="hl-comment">//</span><span class="hl-comment"> other stuffs</span>
<span class="hl-brackets">}</span>
 
<span class="hl-comment">//</span><span class="hl-comment"> in the controller's class (PostController for example)</span>
<span class="hl-reserved">class</span> <span class="hl-identifier">PostController</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CController</span>
<span class="hl-brackets">{</span>
   <span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">actionCreate</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
   <span class="hl-brackets">{</span>
      <span class="hl-var">$model</span><span class="hl-code"> = </span><span class="hl-reserved">new</span> <span class="hl-identifier">Post</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
      </span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">max</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code">;
      </span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">title</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">just new article</span><span class="hl-quotes">'</span><span class="hl-code">;
      </span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">body</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">some text...</span><span class="hl-quotes">'</span><span class="hl-code">;
      </span><span class="hl-reserved">if</span><span class="hl-brackets">(</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span>
      <span class="hl-brackets">{</span>
         <span class="hl-comment">//</span><span class="hl-comment"> If saving data was successful</span>
      <span class="hl-brackets">}</span>
      <span class="hl-reserved">else</span>
      <span class="hl-brackets">{</span>
         <span class="hl-comment">//</span><span class="hl-comment"> if there are wrong data</span>
      <span class="hl-brackets">}</span>
   <span class="hl-brackets">}</span>
 
   <span class="hl-comment">//</span><span class="hl-comment"> other stuffs</span>
<span class="hl-brackets">}</span></pre></div></div>
</div>
					</div>
				<div class="comment alt-1">
			<a class="cid" id="c6946" title="permalink to this comment" href="#c6946">#6946</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=6946"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=6946&amp;vote=1"><span>5</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=6946&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link bronze" href="/user/6843/">marcovtwout</a> at 2012/02/15 11:40am</div>
			<div class="title">Further named scope limitations</div>
			<div class="content"><p>Quote from Qiang in <a href="http://code.google.com/p/yii/issues/detail?id=2468">Issue 2468</a></p>

<blockquote>
  <p>"You should not perform queries in a named scope. The whole named scope mechanism is about modifying the DB criteria object stored in the finder AR. If you perform a query inside of a named scope, you will destroy this mechanism."</p>
</blockquote>

<p>If you don't pay attention to this, you could get a lot of unexpected results.</p>
</div>
					</div>
				<div class="comment alt-0">
			<a class="cid" id="c5329" title="permalink to this comment" href="#c5329">#5329</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=5329"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=5329&amp;vote=1"><span>10</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=5329&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/13714/">klod</a> at 2011/10/05 05:01am</div>
			<div class="title">DefaultScope with dynamic table alias</div>
			<div class="content"><div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">defaultScope</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span>
<span class="hl-brackets">{</span>
    <span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
            <span class="hl-quotes">'</span><span class="hl-string">order</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">getTableAlias</span><span class="hl-brackets">(</span><span class="hl-reserved">false</span><span class="hl-code">, </span><span class="hl-reserved">false</span><span class="hl-brackets">)</span><span class="hl-code">.</span><span class="hl-quotes">'</span><span class="hl-string">.update_time DESC</span><span class="hl-quotes">'</span><span class="hl-code">,
            </span><span class="hl-quotes">'</span><span class="hl-string">condition</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">getTableAlias</span><span class="hl-brackets">(</span><span class="hl-reserved">false</span><span class="hl-code">, </span><span class="hl-reserved">false</span><span class="hl-brackets">)</span><span class="hl-code">.</span><span class="hl-quotes">'</span><span class="hl-string">.actif =1</span><span class="hl-quotes">'</span><span class="hl-code">,
    </span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-brackets">}</span></pre></div></div>
</div>
					</div>
				<div class="comment alt-1">
			<a class="cid" id="c4244" title="permalink to this comment" href="#c4244">#4244</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=4244"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=4244&amp;vote=1"><span>9</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=4244&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/17160/">jogasa21</a> at 2011/06/19 10:35pm</div>
			<div class="title">Unique record validation example</div>
			<div class="content"><p>I am new to Yii and it took me some hours to understand how validation rules work along with the validate() method or save() method in a model.
Hope this can be useful to new Yii users.</p>

<p>In this example I want to validate that one record key is unique in a database table, otherwise the rule error message will be automatically displayed.</p>

<p>In my model:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">EmailGroup</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">CActiveRecord</span> <span class="hl-brackets">{</span><span class="hl-code">
   ...
 
   </span><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">rules</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span> <span class="hl-brackets">{</span>
      <span class="hl-reserved">return</span> <span class="hl-reserved">array</span><span class="hl-brackets">(</span>
        <span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">name, description</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">required</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">,
        </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">name</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">length</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">max</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">20</span><span class="hl-brackets">)</span><span class="hl-code">,
        </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">description</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">length</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">max</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-number">45</span><span class="hl-brackets">)</span><span class="hl-code">,
        </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">name, description</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">safe</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">on</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">search</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">,
 
        </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">name</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">unique</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">on</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">insert</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">message</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-quotes">'</span><span class="hl-string">This value already exists!</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span>
      <span class="hl-brackets">)</span><span class="hl-code">;
   </span><span class="hl-brackets">}</span><span class="hl-code">
   ...
</span><span class="hl-brackets">}</span>
<span class="hl-inlinetags">?&gt;</span></pre></div></div>

<p>In my controller:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-reserved">class</span> <span class="hl-identifier">EmailGroupController</span> <span class="hl-reserved">extends</span> <span class="hl-identifier">Controller</span> <span class="hl-brackets">{</span><span class="hl-code">
   ...
 
   </span><span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">actionCreate</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span> <span class="hl-brackets">{</span>
      <span class="hl-var">$model</span><span class="hl-code"> = </span><span class="hl-reserved">new</span> <span class="hl-identifier">EmailGroup</span><span class="hl-code">;
 
      </span><span class="hl-reserved">if</span> <span class="hl-brackets">(</span><span class="hl-reserved">isset</span><span class="hl-brackets">(</span><span class="hl-var">$_POST</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">EmailGroup</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span> <span class="hl-brackets">{</span>
         <span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">attributes</span><span class="hl-code"> = </span><span class="hl-var">$_POST</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">EmailGroup</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">;
 
         </span><span class="hl-comment">//</span><span class="hl-comment"> $model-&gt;save() automatically invokes the $model-&gt;validate() method</span>
         <span class="hl-comment">//</span><span class="hl-comment"> which fires the rules() function defined in the EmailGroup class.</span>
         <span class="hl-reserved">if</span> <span class="hl-brackets">(</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span>
            <span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">redirect</span><span class="hl-brackets">(</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">view</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">id</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">name</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">;
      </span><span class="hl-brackets">}</span>
      <span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">render</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">create</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">model</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$model</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">;
   </span><span class="hl-brackets">}</span><span class="hl-code">
 
   ...
</span><span class="hl-brackets">}</span></pre></div></div>

<p>This simple example shows how easy is to define validation rules for an ActiveRecord, to guarantee that the record's key is unique and valid. In this case, the predefined validator used is "unique" and the scenario is "insert".
The error message is displayed under the form's input element, by default.</p>

<p>Recommended links:</p>

<ul><li>http://www.yiiframework.com/doc/guide/1.1/en/form.model</li>
<li>http://php-thoughts.cubedwater.com/2009/validation-scenarios/</li>
</ul></div>
					</div>
				<div class="comment alt-0">
			<a class="cid" id="c3042" title="permalink to this comment" href="#c3042">#3042</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=3042"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=3042&amp;vote=1"><span>3</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=3042&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/12303/">Woil</a> at 2011/03/09 05:03pm</div>
			<div class="title">Delete doesn&#039;t use scopes!</div>
			<div class="content"><p>Just a word of caution: deleteAll and other delete functions do not use applied scopes.</p>

<p>This is by design, but can cause problems.
http://code.google.com/p/yii/issues/detail?id=649</p>

<p>An easy way around this is to add the following function to your base active record class:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-comment">/*</span><span class="hl-comment">*
     * Deletes rows with the specified condition, after applying existing scopes
     * See {@link find()} for detailed explanation about $condition and $params.
     *</span><span class="hl-inlinedoc"> @param </span><span class="hl-comment">mixed $condition query condition or criteria.
     *</span><span class="hl-inlinedoc"> @param </span><span class="hl-comment">array $params parameters to be bound to an SQL statement.
     *</span><span class="hl-inlinedoc"> @return </span><span class="hl-comment">integer the number of rows deleted
     </span><span class="hl-comment">*/</span>
    <span class="hl-reserved">public</span> <span class="hl-reserved">function</span> <span class="hl-identifier">deleteAllWithScopes</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-code">=</span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span>
    <span class="hl-brackets">{</span>
        <span class="hl-identifier">Yii</span><span class="hl-code">::</span><span class="hl-identifier">trace</span><span class="hl-brackets">(</span><span class="hl-identifier">get_class</span><span class="hl-brackets">(</span><span class="hl-var">$this</span><span class="hl-brackets">)</span><span class="hl-code">.</span><span class="hl-quotes">'</span><span class="hl-string">.deleteAllWithScopes()</span><span class="hl-quotes">'</span><span class="hl-code">,
                </span><span class="hl-quotes">'</span><span class="hl-string">system.db.ar.CustomCActiveRecord</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">;
        </span><span class="hl-var">$builder</span><span class="hl-code">=</span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">getCommandBuilder</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
        </span><span class="hl-var">$criteria</span><span class="hl-code">=</span><span class="hl-var">$builder</span><span class="hl-code">-&gt;</span><span class="hl-identifier">createCriteria</span><span class="hl-brackets">(</span><span class="hl-var">$condition</span><span class="hl-code">,</span><span class="hl-var">$params</span><span class="hl-brackets">)</span><span class="hl-code">;
 
        </span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">applyScopes</span><span class="hl-brackets">(</span><span class="hl-var">$criteria</span><span class="hl-brackets">)</span><span class="hl-code">;
 
        </span><span class="hl-var">$command</span><span class="hl-code">=</span><span class="hl-var">$builder</span><span class="hl-code">-&gt;</span><span class="hl-identifier">createDeleteCommand</span><span class="hl-brackets">(</span><span class="hl-var">$this</span><span class="hl-code">-&gt;</span><span class="hl-identifier">getTableSchema</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">,</span><span class="hl-var">$criteria</span><span class="hl-brackets">)</span><span class="hl-code">;
        </span><span class="hl-reserved">return</span> <span class="hl-var">$command</span><span class="hl-code">-&gt;</span><span class="hl-identifier">execute</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-brackets">}</span></pre></div></div>
</div>
					</div>
				<div class="comment alt-1">
			<a class="cid" id="c3014" title="permalink to this comment" href="#c3014">#3014</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=3014"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=3014&amp;vote=1"><span>3</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=3014&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/1907/">phazei</a> at 2011/03/08 03:23am</div>
			<div class="title">reusing a single AR instance for multiple inserts</div>
			<div class="content"><p>Here is an example of what must be done if you want to reuse an active record instance to insert multiple but similar items:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-reserved">false</span><span class="hl-brackets">)</span><span class="hl-code">;
</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">isNewRecord</span><span class="hl-code"> = </span><span class="hl-reserved">true</span><span class="hl-code">;
</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">primaryKey</span><span class="hl-code"> = </span><span class="hl-reserved">NULL</span><span class="hl-code">;
</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">someAttribute</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">new value</span><span class="hl-quotes">'</span><span class="hl-code">;
</span><span class="hl-var">$model</span><span class="hl-code">-&gt;</span><span class="hl-identifier">save</span><span class="hl-brackets">(</span><span class="hl-reserved">false</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre></div></div>

<p>The second save will insert a new record.</p>
</div>
					</div>
				<div class="comment alt-0">
			<a class="cid" id="c2962" title="permalink to this comment" href="#c2962">#2962</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=2962"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=2962&amp;vote=1"><span>6</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=2962&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/1907/">phazei</a> at 2011/03/02 09:23pm</div>
			<div class="title">findAllByAttributes $attributes value</div>
			<div class="content"><p>Just to clarify, the $attributes value for the findAllByAttributes and findByAttributes methods is an array with attribute value pairs like so:</p>

<div class="hl-code"><div class="hl-main"><pre><span class="hl-var">$attributes</span><span class="hl-code"> = </span><span class="hl-reserved">array</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">column_A</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$column_A_desiderd_value</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">column_B</span><span class="hl-quotes">'</span><span class="hl-code">=&gt;</span><span class="hl-var">$column_B_desiderd_value</span><span class="hl-brackets">)</span></pre></div></div>
</div>
					</div>
				<div class="comment alt-1">
			<a class="cid" id="c2395" title="permalink to this comment" href="#c2395">#2395</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=2395"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=2395&amp;vote=1"><span>17</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=2395&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/4560/">Sheldmandu</a> at 2010/12/22 11:45pm</div>
			<div class="title">Class Level Methods vs Static Methods</div>
			<div class="content"><p>It seems that many developers are a little confused with the use of what in Yii is referred to as Class Level Methods and don't understand how to use them as opposed to Static Methods.</p>

<p>For example people write <strong>Comments::generateTags()</strong> instead of <strong>Comments::model()-&gt;generateTags()</strong>.</p>

<p>This is understandable, given how little guidance is given on this...</p>

<p>Here's the more detailed guidance.</p>

<p>What Class Level Methods are are effectively Static Methods BUT with the benefit of being able to use inheritance. That is, you can override the operation of a Class Level Method in a subclass, whereas if you used a static method you would not be able to override it. Much of the confusion actually comes from the fact that you're putting something that acts on the recordset (as opposed to on an individual record) as a non-static method of an active record class and it just feels weird, so you drop back to using a static method. 
Usually, what one would do is if they wanted to create methods to act on the recordset rather than the individual record (and have the benefit of inheritance) is to create a Manager/Module class which is responsible for operations on sets of records.</p>

<p>For example CommentManager/CommentModule (note that module is not used in the sense that Yii uses it but in the sense that Martin Fowler uses it when describing Table Module pattern). As Martin Fowler points out on on p.127 of his book called Patterns of Enterprise Application Architecture, the benefit of an instance is inheritance.</p>

<p>Effectively what the designers of Yii have done is rolled this all into the one ActiveRecord class. So it might feel a little weird at first, but then you get used to it.</p>

<p>In general, you should use class level methods, not static methods, as it gives you the benefit of inheritance although it might feel a little weird. Then you call them using <strong>$class::model()-&gt;method()</strong>.</p>

<p>Hope this helps developers understand how to structure their code.</p>
</div>
					</div>
				<div class="comment alt-0">
			<a class="cid" id="c1907" title="permalink to this comment" href="#c1907">#1907</a>
			<a class="widget-reporter" title="Please report to us if you find any inappropriate content." href="/site/report/?type=Comment&amp;id=1907"><span>report it</span></a>			<div class="widget-voter"><ul>
	<li class="vote up"><a title="Thumb up" class="g-login" href="/site/vote/?type=Comment&amp;id=1907&amp;vote=1"><span>16</span></a></li>
	<li class="vote down"><a title="Thumb down" class="g-login" href="/site/vote/?type=Comment&amp;id=1907&amp;vote=0"><span>0</span></a></li>
</ul>
<div class="clear"></div></div>			<div class="meta"><a class="g-user-rank-link" href="/user/46/">KJedi</a> at 2008/12/17 04:30pm</div>
			<div class="title">Tips</div>
			<div class="content"><ol><li><p>When overriding/adding methods like <code>beforeSave</code>, <code>beforeDelete</code> etc, you should return boolean value. If you don't return anything or return false, operation will not be executed. Yes, that's written in the class reference, but hope this notice will save debugging time for someone.
General rule - if you override similar method and something goes wrong (not exceptions, but some logic errors), check the class reference for this method details and return value before digging framework's code.</p></li>
<li><p>If you want to display value from the DB in another way, for example, yes-no instead of 1-0, don't use <code>afterFind</code> method for this conversion because you'll have to override <code>beforeSave</code> method also to revert that. Better approach is using view</p></li>
<li><p><code>beforeValidate</code> method may be used for normalizing user input. For example, you get yes-no from the form, but need 1-0. You can do it here. Why here, not in <code>beforeSave</code>? Because when you've used yiic tool to create the model and there was a field with integers, yiic, added validation rules for these fields; it requires that field to be integer. Sure, you can remove that, but why to break validation logic :)
Alternative usage - is populating default fields. Reason for not using <code>beforeSave</code> method for this is the same.</p></li>
<li><p><code>beforeSave</code> method is used best for preprocessing protected fields. For example, you need to display url in the form of site.com/dresses.html, where 'dresses' is the category. Sure, you will not put category name to the url. so you'll create additional field like intName, that is the same as category name, but with processing - remove spaces, special symbols etc. This job can be done in <code>beforeSave</code></p></li>
<li><p>Note, that when you performing relational query and do <code>findAll()</code>, you get objects, however when you use DAO's <code>queryAll</code>, you get associative arrays.</p></li>
</ol></div>
					</div>
			</div>
	<div id="comment-add">
		<h3 id="add-comment">Leave a comment</h3>

			<p>Please <a class="g-login" rel="/doc/guide/1.1/en/database.ar#add-comment" href="#">login</a> to leave your comment.</p>
		</div>
</div>
           </div>
</div>
					</div>
				
								<div class="clear"></div>
			</div>
			<div class="clear"></div>
					</div>
	</div>

	<div class="layout-main-footer">
		<div class="container_12">
			<div class="grid_6">
				<ul class="menu">
				<li class="main">About
<ul class="sub">
<li><a href="/about/">About Yii</a></li>
<li><a href="/features/">Features</a></li>
<li><a href="/performance/">Performance</a></li>
<li><a href="/license/">License</a></li>
<li><a href="/contact/">Contact Us</a></li>
</ul>
</li>
<li class="main">Downloads
<ul class="sub">
<li><a href="/download/">Framework</a></li>
<li><a href="/extensions/">Extensions</a></li>
<li><a href="/demos/">Demos</a></li>
<li><a href="/logo/">Logo</a></li>
</ul>
</li>
<li class="main">Documentation
<ul class="sub">
<li><a href="/tour/">Take the Tour</a></li>
<li><a href="/tutorials/">Tutorials</a></li>
<li><a href="/doc/api/">Class Reference</a></li>
<li><a href="/doc-2.0/guide-index.html">Guide 2.0</a></li>
<li><a href="/doc-2.0/index.html">Class Reference 2.0</a></li>
<li><a href="/wiki/">Wiki</a></li>
<li><a href="/screencasts/">Screencasts</a></li>
<li><a href="/resources/">Resources</a></li>
</ul>
</li>
<li class="main">Development
<ul class="sub">
<li><a href="/contribute/">Contribute to Yii</a></li>
<li><a href="https://github.com/yiisoft/yii/commits/master">Latest Updates</a></li>
<li><a href="https://github.com/yiisoft/yii/issues/new">Report a Bug</a></li>
<li><a href="/security/">Report a Security Issue</a></li>
</ul>
</li>
<li class="main">Community
<ul class="sub">
<li><a href="/forum/">Forum</a></li>
<li><a href="/chat/">Live Chat</a></li>
<li><a href="/news/">News</a></li>
<li><a href="/user/halloffame/">Hall of Fame</a></li>
<li><a href="/badges/">Badges</a></li>
</ul>
</li>
				</ul>
			</div>
			<div class="grid_1">&nbsp;</div>
			<div class="grid_5">
				<h3>Yii Supporters</h3>
				<ul class="g-list-none supporters">

				</ul>
			</div>

			<div class="clear"></div>
			<div class="grid_12 copyright">
				<ul class="social">
					<li class="twitter"><a href="https://twitter.com/yiiframework" target="_blank" rel="nofollow" title="follow us on twitter">Twitter</a></li>
					<li class="facebook"><a href="https://www.facebook.com/groups/yiitalk/" target="_blank" rel="nofollow" title="join yii group at facebook">Facebook</a></li>
					<li class="linkedin"><a href="http://www.linkedin.com/groups?gid=1483367" target="_blank" rel="nofollow" title="join yii group at linkedin">LinkedIn</a></li>
					<li class="feeds"><a title="RSS feeds" href="/rss.xml/">RSS Feeds</a></li>
				</ul>
				<div class="clear"></div>
				<a href="/tos/">Terms of Service</a> |
				<a href="/license/">License</a> |
				<a href="/contact/">Contact Us</a><br/>
				Copyright &copy; 2015 by <a href="http://www.yiisoft.com">Yii Software LLC</a>.
				All Rights Reserved.
			</div>
			<div class="clear"></div>
		</div>
	</div>
</div>

    <script type="text/javascript" src="/js/site-20121004195728.js"></script>


<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['site._setAccount', 'UA-5843896-1']);
_gaq.push(['site._trackPageview']);

(function() {
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
<script type="text/javascript">
function trackClick(link, action, category) {
	action=action || link.href;
	category=category || 'Outbound Links';
	try {
		_gaq.push(['site._trackEvent', category, action]);
		setTimeout('document.location = "' + link.href + '"', 250);
	}catch(err){}
	return false;
}
</script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
</body>
</html>
